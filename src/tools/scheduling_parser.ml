type token =
  | INT of (int)
  | EOF
  | SEC
  | MIN
  | HOUR
  | DAY
  | WDAY
  | LPAR
  | RPAR
  | AND
  | OR
  | INTER
  | LEFT
  | RIGHT

open Parsing;;
# 3 "tools/scheduling_parser.mly"
  open Scheduling_defs
# 21 "tools/scheduling_parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  258 (* SEC *);
  259 (* MIN *);
  260 (* HOUR *);
  261 (* DAY *);
  262 (* WDAY *);
  263 (* LPAR *);
  264 (* RPAR *);
  265 (* AND *);
  266 (* OR *);
  267 (* INTER *);
  268 (* LEFT *);
  269 (* RIGHT *);
    0|]

let yytransl_block = [|
  257 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\004\000\004\000\004\000\004\000\
\005\000\000\000"

let yylen = "\002\000\
\002\000\004\000\004\000\001\000\003\000\005\000\005\000\002\000\
\002\000\002\000\002\000\001\000\002\000\002\000\002\000\002\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\004\000\012\000\
\000\000\011\000\010\000\009\000\008\000\000\000\000\000\001\000\
\000\000\000\000\016\000\015\000\014\000\013\000\017\000\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\002\000\003\000\
\006\000\007\000"

let yydgoto = "\002\000\
\005\000\006\000\007\000\008\000\009\000"

let yysindex = "\004\000\
\003\255\000\000\005\255\003\255\000\000\001\000\000\000\000\000\
\020\255\000\000\000\000\000\000\000\000\009\255\249\254\000\000\
\003\255\003\255\000\000\000\000\000\000\000\000\000\000\003\255\
\003\255\000\000\012\000\017\000\006\255\012\255\000\000\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\252\255\000\000\000\000\000\000"

let yytablesize = 267
let yytable = "\015\000\
\016\000\024\000\025\000\003\000\001\000\026\000\010\000\011\000\
\012\000\023\000\013\000\031\000\027\000\028\000\004\000\014\000\
\032\000\000\000\033\000\029\000\030\000\019\000\020\000\021\000\
\034\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\018\000"

let yycheck = "\004\000\
\000\000\009\001\010\001\001\001\001\000\013\001\002\001\003\001\
\004\001\001\001\006\001\000\000\017\000\018\000\012\001\011\001\
\000\000\255\255\013\001\024\000\025\000\002\001\003\001\004\001\
\013\001\006\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001"

let yynames_const = "\
  EOF\000\
  SEC\000\
  MIN\000\
  HOUR\000\
  DAY\000\
  WDAY\000\
  LPAR\000\
  RPAR\000\
  AND\000\
  OR\000\
  INTER\000\
  LEFT\000\
  RIGHT\000\
  "

let yynames_block = "\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'expr) in
    Obj.repr(
# 20 "tools/scheduling_parser.mly"
                 ( _1 )
# 179 "tools/scheduling_parser.ml"
               : Scheduling_defs.expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'expr) in
    let _3 = (peek_val parser_env 1 : 'expr) in
    Obj.repr(
# 21 "tools/scheduling_parser.mly"
                      ( And (_1,_3) )
# 187 "tools/scheduling_parser.ml"
               : Scheduling_defs.expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'expr) in
    let _3 = (peek_val parser_env 1 : 'expr) in
    Obj.repr(
# 22 "tools/scheduling_parser.mly"
                      ( Or  (_1,_3) )
# 195 "tools/scheduling_parser.ml"
               : Scheduling_defs.expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'base) in
    Obj.repr(
# 25 "tools/scheduling_parser.mly"
         ( _1 )
# 202 "tools/scheduling_parser.ml"
               : 'expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'expr) in
    Obj.repr(
# 26 "tools/scheduling_parser.mly"
                    ( _2 )
# 209 "tools/scheduling_parser.ml"
               : 'expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'expr) in
    let _4 = (peek_val parser_env 1 : 'expr) in
    Obj.repr(
# 27 "tools/scheduling_parser.mly"
                             ( And (_2,_4) )
# 217 "tools/scheduling_parser.ml"
               : 'expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'expr) in
    let _4 = (peek_val parser_env 1 : 'expr) in
    Obj.repr(
# 28 "tools/scheduling_parser.mly"
                             ( Or  (_2,_4) )
# 225 "tools/scheduling_parser.ml"
               : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : int) in
    Obj.repr(
# 31 "tools/scheduling_parser.mly"
                  ( WeekDay (_1,_1) )
# 232 "tools/scheduling_parser.ml"
               : 'base))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : int) in
    Obj.repr(
# 32 "tools/scheduling_parser.mly"
                  ( Hour (_1,_1) )
# 239 "tools/scheduling_parser.ml"
               : 'base))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : int) in
    Obj.repr(
# 33 "tools/scheduling_parser.mly"
                  ( Minute (_1,_1) )
# 246 "tools/scheduling_parser.ml"
               : 'base))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : int) in
    Obj.repr(
# 34 "tools/scheduling_parser.mly"
                  ( Second (_1,_1) )
# 253 "tools/scheduling_parser.ml"
               : 'base))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'base_interval) in
    Obj.repr(
# 35 "tools/scheduling_parser.mly"
                  ( _1 )
# 260 "tools/scheduling_parser.ml"
               : 'base))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'interval) in
    Obj.repr(
# 38 "tools/scheduling_parser.mly"
                    ( WeekDay _1 )
# 267 "tools/scheduling_parser.ml"
               : 'base_interval))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'interval) in
    Obj.repr(
# 39 "tools/scheduling_parser.mly"
                   ( Hour _1 )
# 274 "tools/scheduling_parser.ml"
               : 'base_interval))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'interval) in
    Obj.repr(
# 40 "tools/scheduling_parser.mly"
                   ( Minute _1 )
# 281 "tools/scheduling_parser.ml"
               : 'base_interval))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'interval) in
    Obj.repr(
# 41 "tools/scheduling_parser.mly"
                   ( Second _1 )
# 288 "tools/scheduling_parser.ml"
               : 'base_interval))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : int) in
    let _3 = (peek_val parser_env 0 : int) in
    Obj.repr(
# 44 "tools/scheduling_parser.mly"
                  ( (_1,_3) )
# 296 "tools/scheduling_parser.ml"
               : 'interval))
(* Entry schedule *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let schedule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : Scheduling_defs.expr)
